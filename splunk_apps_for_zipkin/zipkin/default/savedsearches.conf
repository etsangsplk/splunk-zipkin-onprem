[Zipkin Trace]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","step_duration","duration"]
display.general.type = visualizations
display.page.search.mode = verbose
display.page.search.tab = visualizations
display.visualizations.custom.timeline_app.timeline.axisTimeFormat = SUBSECONDS
display.visualizations.custom.timeline_app.timeline.tooltipTimeFormat = SUBSECONDS
display.visualizations.custom.timeline_app.timeline.useColors = 1
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = source=zipkin traceId=15843031fe3eede9\
	| spath path=annotations{0}.timestamp output=start \
	| spath path=annotations{1}.timestamp output=end\
	| spath path="annotations{0}.endpoint.serviceName" output=serviceName  \
	| eval serviceName=if(isnotnull(parentId), serviceName, "Overall")\
	| eval spanName=if(isnotnull(parentId),"child","parent")\
	| eval spanDuration_ms = (end - start)/1000\
	| eval start=strftime(start/1000000, "%F %T.%3Q")\
	| table start serviceName spanName spanDuration_ms traceId parentId  id* | fields - _raw\
	| sort start traceId

[Zipkin Trace List]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","step_duration","duration"]
display.general.type = visualizations
display.page.search.mode = verbose
display.page.search.tab = visualizations
display.visualizations.charting.chart = bar
display.visualizations.charting.chart.overlayFields = Spans
display.visualizations.custom.timeline_app.timeline.axisTimeFormat = SUBSECONDS
display.visualizations.custom.timeline_app.timeline.tooltipTimeFormat = SUBSECONDS
display.visualizations.custom.timeline_app.timeline.useColors = 1
display.visualizations.custom.type = timeline_app.timeline
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = source=zipkin traceId=* \
	| spath path=annotations{0}.timestamp output=start \
	| spath path=annotations{1}.timestamp output=end\
	| eval spanDuration_ms = (end - start)/1000\
	| stats count(parentId) as Spans,max(spanDuration_ms) as spanDuration_ms by traceId\
	| sort spanDuration_ms desc

[Zipkin Service Map]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.page.search.mode = verbose
display.page.search.tab = visualizations
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.colorMode = categorical
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.drilldownValue = node
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.errColor = #d93f3c
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.maxColor = #d93f3c
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.minColor = #3fc77a
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.numOfBins = 6
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.okColor = #3fc77a
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.useColors = 1
display.visualizations.custom.jointjs_diagram_app.jointjs_diagram.warnColor = #f58f39
display.visualizations.custom.type = jointjs_diagram_app.jointjs_diagram
display.visualizations.type = custom
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = source=zipkin  parentId=*\
	| spath "annotations{0}.value" output=serviceType\
	| spath "annotations{0}.endpoint.serviceName" output=serviceName \
	| eval from = if(serviceType="cs", serviceName, null)\
	| eval to   = if(serviceType="sr", serviceName, null)\
	| transaction traceId \
	| stats values(to) as to by name, from | where from != ""\
	| table from to name

[trace data structure]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
display.visualizations.type = singlevalue
request.ui_dispatch_app = zipkin
request.ui_dispatch_view = search
search = traceId=*\
\
| spath path=annotations{0}.timestamp output=start \
| spath path=annotations{0}.value output=start_type \
| spath path=annotations{1}.timestamp output=end\
| spath path=annotations{1}.value output=end_type \
| spath path="annotations{0}.endpoint.serviceName" output=serviceName  \
| spath path="annotations{0}.endpoint.ipv4" output=ipv4  \
| spath path="binaryAnnotations{0}.value" output=url  \
| spath path="binaryAnnotations{1}.value" output=status_code\
| eval serviceName=if(isnotnull(parentId), serviceName, "Overall")\
| eval spanType=if(isnotnull(parentId),"child","parent")\
| eval duration_ms = (end - start)/1000\
| eval start=strftime(start/1000000, "%F %T.%3Q")\
| eval end=strftime(end/1000000, "%F %T.%3Q")\
| fillnull value="" "parentId"\
\
| table parentId traceId id spanType serviceName start end duration_ms ipv4 url status_code start_type end_type  | fields - _raw\
| sort traceId parentId start id

[trace relationships]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.type = visualizations
display.page.search.mode = verbose
display.page.search.tab = visualizations
display.visualizations.custom.network_topology.network_topology.drilldown = 0
display.visualizations.custom.network_topology.network_topology.link1 = calls
display.visualizations.custom.network_topology.network_topology.link1Color = #ffc000
display.visualizations.custom.network_topology.network_topology.link1Dashed = 0
display.visualizations.custom.network_topology.network_topology.link1Label = calls
display.visualizations.custom.network_topology.network_topology.link2 = link2
display.visualizations.custom.network_topology.network_topology.link2Color = #00b050
display.visualizations.custom.network_topology.network_topology.link2Dashed = 1
display.visualizations.custom.network_topology.network_topology.link2Label = Link 2
display.visualizations.custom.network_topology.network_topology.link3 = link3
display.visualizations.custom.network_topology.network_topology.link3Color = #a5a5a5
display.visualizations.custom.network_topology.network_topology.link3Dashed = 0
display.visualizations.custom.network_topology.network_topology.link3Label = Link 3
display.visualizations.custom.network_topology.network_topology.link4 = link4
display.visualizations.custom.network_topology.network_topology.link4Color = #a5a5a5
display.visualizations.custom.network_topology.network_topology.link4Dashed = 1
display.visualizations.custom.network_topology.network_topology.link4Label = Link 4
display.visualizations.custom.network_topology.network_topology.link5 = link5
display.visualizations.custom.network_topology.network_topology.link5Color = #c00000
display.visualizations.custom.network_topology.network_topology.link5Dashed = 0
display.visualizations.custom.network_topology.network_topology.link5Label = Link 5
display.visualizations.custom.network_topology.network_topology.unfocusOpacity = 0
display.visualizations.custom.type = network_topology.network_topology
display.visualizations.type = custom
request.ui_dispatch_app = zipkin
request.ui_dispatch_view = search
search = traceId=* parentId=*\
|`format_traces`\
| stats values(url) as targetUrl, values(from) as source, values(to) as target  by id \
| eval link="calls", source2 =source\
| search source=*\
| table source source2 targetUrl target link


[zipkin_metric_storage]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */1 * * * *
description = This Saved Search will query the zipkin traces and produce metrics for any serviceName in the metrics index.
dispatch.earliest_time = -5m
dispatch.latest_time = @m
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
display.visualizations.trellis.splitBy = serviceName
enableSched = 1
request.ui_dispatch_app = zipkin
request.ui_dispatch_view = search
search = traceId=* parentId=*  \
| `format_traces`\
| eval prefix = "zipkin.service."\
| stats avg(duration_ms) as duration_ms, count as count by serviceName, prefix\
\
| mcollect index=zipkinmetrics split=true prefix_field=prefix serviceName
